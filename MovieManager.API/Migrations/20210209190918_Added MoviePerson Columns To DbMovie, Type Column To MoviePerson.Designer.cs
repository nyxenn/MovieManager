// <auto-generated />
using System;
using MMApi.Internal.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MMApi.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20210209190918_Added MoviePerson Columns To DbMovie, Type Column To MoviePerson")]
    partial class AddedMoviePersonColumnsToDbMovieTypeColumnToMoviePerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Movie")
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MMApi.Models.DbMovie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorMovieID")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorPersonID")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WriterID")
                        .HasColumnType("int");

                    b.Property<int?>("WriterMovieID")
                        .HasColumnType("int");

                    b.Property<int?>("WriterPersonID")
                        .HasColumnType("int");

                    b.HasKey("MovieID");

                    b.HasIndex("DirectorMovieID", "DirectorPersonID");

                    b.HasIndex("WriterMovieID", "WriterPersonID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MMApi.Models.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MMApi.Models.ListMovie", b =>
                {
                    b.Property<int>("UserListID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("UserListID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("ListMovies");
                });

            modelBuilder.Entity("MMApi.Models.MovieGenre", b =>
                {
                    b.Property<int?>("MovieID")
                        .HasColumnType("int");

                    b.Property<int?>("GenreID")
                        .HasColumnType("int");

                    b.HasKey("MovieID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("MMApi.Models.MoviePerson", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("MoviePeople");
                });

            modelBuilder.Entity("MMApi.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MMApi.Models.UserList", b =>
                {
                    b.Property<int>("UserListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserListID");

                    b.ToTable("UserLists");
                });

            modelBuilder.Entity("MMApi.Models.DbMovie", b =>
                {
                    b.HasOne("MMApi.Models.MoviePerson", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorMovieID", "DirectorPersonID");

                    b.HasOne("MMApi.Models.MoviePerson", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterMovieID", "WriterPersonID");
                });

            modelBuilder.Entity("MMApi.Models.ListMovie", b =>
                {
                    b.HasOne("MMApi.Models.DbMovie", "Movie")
                        .WithMany("Lists")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MMApi.Models.UserList", "UserList")
                        .WithMany("Movies")
                        .HasForeignKey("UserListID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MMApi.Models.MovieGenre", b =>
                {
                    b.HasOne("MMApi.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MMApi.Models.DbMovie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MMApi.Models.MoviePerson", b =>
                {
                    b.HasOne("MMApi.Models.DbMovie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MMApi.Models.Person", "Person")
                        .WithMany("Movies")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
